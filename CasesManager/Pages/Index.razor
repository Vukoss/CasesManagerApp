@page "/"
@page "/index"
@using CaseManagerLibrary.Models.IModels
@using CaseManagerLibrary.Utility
@using CaseManagerLibrary.Data.UOW
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUnitOfWork UnitOfWork
@inject NavigationManager navigation

<AuthorizeView Roles="Administrator, User">
    <Authorized>
        <div class="container mt-5 mb-5">
            <div class="d-flex justify-content-between align-items-center">
                <h3>Cześć, @user.FullName!</h3>
                @if (claimsPrincipal.IsInRole(SD.admin))
                {
                    <button class="btn button-primary-idle d-flex align-items-center" @onclick="HandleButtonNewCase">
                        <span class="material-symbols-outlined me-1">
                            add
                        </span>
                        <span class="align-middle">Nowe zlecenie</span>
                    </button>
                }
            </div>
        </div>
        <div class="container">
            <div class="row d-flex justify-content-evenly gap-2">
                <div class="col-7 p-5" style="background-color: #F6F8FB; min-height:600px;">
                    <div class="d-flex justify-content-between align-items-top mb-5">
                        <div>
                            <h4>Sprawy podpięte do ciebie</h4>
                            <p>W sumie: @cases.Count()</p>
                        </div>
                        <div>
                            <a class="link d-flex align-items-center" href="/allcases">
                                <span class="align-middle">Wszystkie zlecenia w realizacji</span>
                                <span class="material-symbols-outlined">
                                    arrow_forward
                                </span>
                            </a>
                        </div>
                    </div>
                    <div>
                        @if (cases.Count() == 0)
                        {
                            <p>Nie masz przypisanych spraw.</p>
                        }
                        else if (cases.Count() > 0 && cases.Count() < 3)
                        {
                            <div class="d-flex justify-content-center gap-2">
                                @foreach (var c in cases)
                                {
                                    <CardComponent Case="c" PreviousPage="/index"></CardComponent>
                                }
                            </div>
                        }
                        else if (cases.Count() >= 3)
                        {
                            <MudCarousel Class="mad-width-full" Style="height:600px;display:flex;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                                @foreach (var c in cases)
                                {
                                    <MudCarouselItem Transition="transition">
                                        <div style="height:600px;" class="d-flex justify-content-center align-items-center">
                                            <CardComponent Case="c" PreviousPage="/index"></CardComponent>
                                        </div>
                                    </MudCarouselItem>
                                }
                            </MudCarousel>
                        }
                    </div>
                </div>
                <div class="col" style="background-color: #F6F8FB; min-height: 600px; padding: 3rem;">
                    <Chart userId="@userId" />
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code{
    private List<ICase> cases = new();

    private Specialist user = new();

    private ClaimsPrincipal claimsPrincipal;

    private string userId = "";

    private AuthenticationState authenticationState;

    private const string PreviousPage = "index";

    private bool arrows = true;

    private bool bullets = true;

    private bool enableSwipeGesture = true;

    private bool autocycle = false;

    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        claimsPrincipal = authenticationState.User;
        userId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        user = await UnitOfWork.SpecialistRepository.GetSpecialistById(userId);
        cases = await UnitOfWork.CaseRepository.GetAllSpecialistsCases(userId);
        if (cases.Count() > 8)
        {
            bullets = false;
        }
    }

    private void HandleButtonNewCase()
    {
        navigation.NavigateTo($"/caseform/{PreviousPage}");
    }
}